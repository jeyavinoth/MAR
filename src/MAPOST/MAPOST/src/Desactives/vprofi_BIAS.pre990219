C +----------------------------------------------------------------------+
C | MAR post-processing                                          02/1999 |
C |                                                              v.1.0a3 |
C | Vprofi_BIAS                                                          |
C |  Computes vertical profiles, by horizontal averaging                 |
C |  on the MAR sigma levels.                                            |
C +----------------------------------------------------------------------+
C
      SUBROUTINE Vprofi_BIAS (idRLS, idMAR, itM, itR,
     $           MARisol, MARlon, MARlat,
     $           VarN_MAR, VarN_RLS, VPpOUT, VP_BIAS)

      IMPLICIT NONE
 
C +...* Large Scale input data dimension.
      include 'LSMARIN.inc'
C +...* MAR dimensions :
      include 'MARdim_def.inc'
      include 'MARdim.inc'

C +---INPUT
C +   ~~~~~
      INTEGER idMAR, itM, idRLS, itR
      CHARACTER*(*) VarN_RLS, VarN_MAR
      REAL MARisol(mx,my), MARlon(mx,my), MARlat(mx,my)

C +---OUTPUT (press. coord VPp, value(VPp) )
C +   ~~~~~~
      REAL VPpOUT(mz), VP_BIAS(mz)

C +---LOCAL
C +   ~~~~~
      CHARACTER *10 var_units, tmp_units
C +-  -Coordonnees:
      REAL LSlon(LSni), LSlat(LSnj), LSlev(LSnk)
      REAL MARx(mx), MARy(my), empty1(1), sigma(mz)
      REAL ptop, ptopPa
      REAL CSTp (LSnk), SIGp (LSnk)
C +-  -Valeurs lues et intermédiaires de calcul:
      REAL wk3MAR(mx,my,mz), wkMAR(mx,my)
      REAL wk3MIX(mx,my,LSnk), wkMIX(mx,my)
      REAL wk3RLS(LSni,LSnj,LSnk), wkRLS(LSni,LSnj)
      REAL pstMAR(mx,my), spIRLS(mx,my), splocRLS
      REAL valINT      , pINT
      REAL valRLS(LSnk), pRLS(LSnk)
      REAL va3INT(mx,my,mz)
C +-  -Derniere etape, profils vertic. moyens:
      REAL VP_MAR(mz), VP_IRLS(mz), VP_FRLS
      REAL VPpMAR(mz), VPpRLS(mz), pm_reg, VPpTMP, VP_TMP
      
      INTEGER ilv, ii, jj, nelem

C +---Read the MAR coordinate and data
C +   --------------------------------

      CALL UNread
     &   (idMAR, 'pstar', itM, 0, 1,1,mx,my,1,
     &    MARx, MARy, empty1, var_units, pstMAR)
     
      ptop   = 0.01
      ptopPa = ptop * 1000.
C +   ...MAR top pressure (en kPa = MAR, et en Pa)

      CALL UNread
     &   (idMAR, VarN_MAR, itM, 0, 1,1,mx,my,mz,
     &    MARx, MARy, sigma, var_units, wk3MAR)
C +...  NB: FileID VarName time 0=3D subregion #levels

C +---Read the RLS coordinate and data
C +   --------------------------------

      CALL UNread
     &   (idRLS,'CSTp', 0, 0, 0, 0,
     &    LSnk    ,1      , 1     ,
     &    LSlev   ,empty1 , empty1,
     &    tmp_units, CSTp)
C +...constant pressure contrib. to coordinate, in Pa

      CALL UNread
     &   (idRLS,'SIGp', 0, 0, 0, 0,
     &    LSnk     ,1      , 1     ,
     &    LSlev    ,empty1 , empty1,
     &    tmp_units, SIGp)

      CALL UNread
     &   (idRLS, 'SP', itR, 0, 1,1,LSni,LSnj,1,
     &    LSlon, LSlat, empty1, tmp_units, wkRLS)
     
      CALL INThor (1,
     &    LSlon , LSlat , wkRLS,
     &    MARlon, MARlat, spIRLS)

      CALL UNread
     &   (idRLS, VarN_RLS, itR,  0, 1,1,LSni,LSnj,LSnk,
     &    LSlon, LSlat   , LSlev, var_units, wk3RLS)
C +...  NB: FileID VarName time level subregion #levels
C +...  (data, still on the RLS grid)

C +---Mean Pressure Coordinates
C +   -------------------------

C +-  -For MAR:
C     - - - - -
       CALL VPmean (MARisol, pstMAR, pm_reg)
       DO ilv = 1, mz
          VPpMAR(ilv)= 10.* (pm_reg*sigma(ilv)+ptop)
C +       ...En hPa.
       ENDDO
 
C +-  -For RLS interpolated to MAR levels:
C     - - - - - - - - - - - - - - - - - - -
       CALL VPmean (MARisol, spIRLS, pm_reg)
C +    ...(RLS est en Pa)
       DO ilv = 1, mz
          VPpRLS(ilv)= 0.01
     &               *((pm_reg-ptopPa)*sigma(ilv)+ptopPa)
C +       ...Pres. surf. RLS et niv. MAR, en hPa.
       ENDDO
  
C +---Interpolate the RLS data to MAR grid.
C +   -------------------------------------
      
      DO ilv = 1, LSnk
      DO jj  = 1, LSnj
      DO ii  = 1, LSni
        wkRLS(ii,jj)=wk3RLS(ii,jj,ilv)
      END DO
      END DO
        Call INThor (1,
     &    LSlon , LSlat , wkRLS,
     &    MARlon, MARlat, wkMIX)     
C +...  Horizontal interp. to MAR grid 
C +...  (RLS vertical grid)
      DO jj  = 1, my
      DO ii  = 1, mx
        wk3MIX(ii,jj,ilv)=wkMIX(ii,jj)
      END DO
      END DO
      END DO
 
      DO ii= 1,mx
      DO jj= 1,my

         splocRLS = spIRLS(ii,jj)
C +      ...RLS pressure thickness (MAR hor. grid), Pa

         DO ilv = 1, LSnk  
           pRLS  (ilv)= log(CSTp(ilv)+splocRLS*SIGp(ilv))
C +        ...pressure on the RLS levels, Pa
           valRLS(ilv)= wk3MIX(ii,jj,ilv)
C +        ...value of "VarN_RLS" on the RLS levels

           valRLS(ilv)= valRLS(ilv)
     .                * (100000./pRLS(ilv))**(.28586)
C +        ...TEMPORARY: TEMP to POT TEMP

         END DO

         DO ilv = 1, mz
           pINT= log((splocRLS-ptopPa)*sigma(ilv)+ptopPa)
C +        ...RLS pres at MAR-type sigma coord., Pa

           CALL INTlin(pRLS, valRLS,LSnk,
     .                 pINT, valINT)

           valINT= valINT 
     .           * (pINT/100000.)**(.28586)
C          ...TEMPORARY: POT TEMP to TEMP

           va3INT(ii,jj,ilv)= valINT
C +        ...Interpolation to MAR vert. grid.

         END DO

      ENDDO
      ENDDO

C +---Sub-region horizontal averaging.
C     --------------------------------
      DO ilv = 1, mz
         DO jj  = 1, my
         DO ii  = 1, mx
            wkMAR(ii,jj)=wk3MAR(ii,jj,ilv)
         END DO
         END DO
         CALL VPmean (MARisol, wkMAR, VP_TMP)
         VP_MAR(ilv)= VP_TMP

         DO jj  = 1, my
         DO ii  = 1, mx
            wkMAR(ii,jj)=va3INT(ii,jj,ilv)
         END DO
         END DO
         CALL VPmean (MARisol, wkMAR, VP_TMP)
         VP_IRLS(ilv)= VP_TMP

       ENDDO
 
C +---Bias computation and outputs
C     ----------------------------
      DO ilv = 1, mz

       VPpTMP = VPpMAR(ilv)
       
       CALL INTlin(VPpRLS, VP_IRLS, mz,
     &             VPpTMP, VP_FRLS)
C +    ...Legere interp. lineaire en coord press. = ramener au
C +    ...niveaux de p du MAR du a petite diff p surf. moyenne

C      Pour test sans cette interpolation:
C      VP_FRLS = VP_IRLS(ilv)

       VP_BIAS(ilv)= VP_BIAS(ilv) + VP_MAR(ilv) - VP_FRLS
       VPpOUT (ilv)= VPpOUT(ilv)  + VPpMAR(ilv) 

       IF (VPpTMP.GT.VPpRLS(mz).OR.VPpTMP.LT.VPpRLS(1)) THEN
         VP_BIAS(ilv)= 1.E28
C +      ...do not allow extrapolation (set as missing)
       ENDIF

      ENDDO
      write(*,*) VPpRLS(mz)-VPpMAR(mz)

      END

C +----------------------------------------------------------------------+
C +
      SUBROUTINE VPmean (MARisol, wkMAR, tmpVP)
C +...* MAR dimensions :
      include 'MARdim.inc'
      REAL MARisol(mx,my)
      REAL wkMAR(mx,my)
      REAL tmpVP
      INTEGER ii, jj, nelem

      tmpVP= 0
      nelem= 0
      DO ii= 10,mx-10
      DO jj= 10,my-10
C         IF (MARisol(ii,jj).GE.3.5) THEN
            tmpVP = tmpVP + wkMAR(ii,jj)
            nelem = nelem + 1
C         ENDIF
      ENDDO
      ENDDO
      tmpVP= tmpVP / nelem

      END
